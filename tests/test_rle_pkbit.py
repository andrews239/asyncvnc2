from io import BytesIO
from asyncio import StreamReader, IncompleteReadError
from asyncvnc2 import _rle_packedbits
import pytest

def _reader(txt):
    reader = StreamReader()
    reader._buffer.extend(bytearray(txt))
    return reader

text = [ ( 2, 10, 10, (b"___@@@"+
                        b"\252\200\252\200\252\200\125\100\125\100\125\100\063\000\063\000\314\300\314\300" + b"tail" * 10  ),
                       (b"@@@___"*15+
                        b"___@@@"*15+
                        b"______@@@@@@______@@@@@@______"*2+
                        b"@@@@@@______@@@@@@______@@@@@@"*2 ) ),
         ( 2, 16, 16, (b"___@@@"+
                        b"\252\252\252\252\252\252\125\125\125\125\125\125\063\063\063\063\314\314\314\314"+
                        b"\377\000\377\000\377\000\000\377\000\377\000\377" + b"tail" * 10  ),
                       (b"@@@___"*24+
                        b"___@@@"*24+
                        b"______@@@@@@"*8+
                        b"@@@@@@______"*8+
                        b"@@@@@@@@@@@@@@@@@@@@@@@@________________________"*3+
                        b"________________________@@@@@@@@@@@@@@@@@@@@@@@@"*3 ) ),
         ( 4, 8, 16, (b"___|||ooo@@@"+
                        b"\252\252\252\252\252\252\125\125\125\125\125\125\063\063\063\063\314\314\314\314"+
                        b"\377\000\377\000\377\000\000\377\000\377\000\377" + b"tail" * 10  ),
                       (b"ooo"*24+
                        b"|||"*24+
                        b"___@@@"*8+
                        b"@@@___"*8+
                        b"@@@@@@@@@@@@____________"*3+
                        b"____________@@@@@@@@@@@@"*3 ) ),
         ( 16, 8, 8, (b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"\252\252\252\252\252\252\125\125\125\125\125\125\063\063\063\063\314\314\314\314"+
                        b"\377\000\377\000\377\000\000\377\000\377\000\377" + b"tail" * 10  ),
                       (b"oo2"*12+
                        b"||1"*12+
                        b"@@@"*8+
                        b"__3"*8+
                        b"@@3@@3______"*3+
                        b"______@@3@@3"*3 ) ),
         ( 16, 7, 8, (b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"\252\252\252\252\252\252\125\125\125\125\125\125\063\063\063\063\314\314\314\314"+
                        b"\377\000\377\000\377\000\000\377\000\377\000\377" + b"tail" * 10  ),
                       (b"oo2"*11+
                        b"||1"*10+
                        b"@@@"*7+
                        b"__3"*7+
                        b"@@3@@3______@@3@@3___"+
                        b"@@3@@3____________@@3"+
                        b"______@@3@@3______@@3" ) ),
         ( 16, 5, 9, (b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"\252\252\252\252\252\252\125\125\125\125\125\125\063\063\063\314\314\314"+
                        b"\377\000\377\000\377\000\000\377\000" + b"tail" * 10  ),
                       (b"oo2"*10+
                        b"||1"*10+
                        b"@@@"*5+
                        b"__3"*5+
                        b"@@3@@3______@@3"+
                        b"______@@3@@3___"+
                        b"______@@3@@3___" ) )
       ]

def _to_str(val):
    if isinstance(val, bytes):
        return "-"
    else:
        return val

@pytest.mark.parametrize("subenc,cw,ch,data,decoded", text, ids=_to_str)
@pytest.mark.asyncio
async def test_init(subenc, cw, ch, data, decoded):
    reader = _reader(data)
    decode = await _rle_packedbits( reader, cw, ch, subenc, [])

    assert decode == decoded
    assert await reader.read(400) == b"tail" * 10