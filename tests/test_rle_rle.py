from io import BytesIO
from asyncio import StreamReader, IncompleteReadError
from asyncvnc2 import _rle_rle
import pytest

def _reader(txt):
    reader = StreamReader()
    reader._buffer.extend(bytearray(txt))
    return reader

text = [ ( 2, 10, 10, (b"___@@@"+
                        b"\001\000"*15+b"\000\001"*15+
                        b"\000\000\001\001\000\000\001\001\000\000"*2 +
                        b"\001\001\000\000\001\001\000\000\001\001"*2 + b"tail" * 10  ),
                       (b"@@@___"*15+
                        b"___@@@"*15+
                        b"______@@@@@@______@@@@@@______"*2+
                        b"@@@@@@______@@@@@@______@@@@@@"*2 ) ),
         ( 2, 16, 16, (b"___@@@"+
                        b"\001\000"*24+b"\000\001"*24+
                        b"\000\000\001\001"*8 +
                        b"\001\001\000\000"*8 +
                        b"\201\007\200\007"*3 +
                        b"\200\007\201\007"*3 + b"tail" * 10  ),
                       (b"@@@___"*24+
                        b"___@@@"*24+
                        b"______@@@@@@"*8+
                        b"@@@@@@______"*8+
                        b"@@@@@@@@@@@@@@@@@@@@@@@@________________________"*3+
                        b"________________________@@@@@@@@@@@@@@@@@@@@@@@@"*3 ) ),
         ( 4, 8, 16, (b"___|||ooo@@@"+
                        b"\202\027\201\027"+
                        b"\000\003"*8+
                        b"\003\000"*8+
                        b"\203\003\200\003"*3+
                        b"\200\003\203\003"*3 + b"tail" * 10  ),
                       (b"ooo"*24+
                        b"|||"*24+
                        b"___@@@"*8+
                        b"@@@___"*8+
                        b"@@@@@@@@@@@@____________"*3+
                        b"____________@@@@@@@@@@@@"*3 ) ),
         ( 16, 8, 8, (b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"\212\013\205\013\203\007\214\007"+
                        b"\017\017\000\000"*3+
                        b"\000\000\017\017"*3 + b"tail" * 10  ),
                       (b"oo2"*12+
                        b"||1"*12+
                        b"@@@"*8+
                        b"__3"*8+
                        b"@@3@@3______"*3+
                        b"______@@3@@3"*3 ) ),
         ( 16, 80, 80, (b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"\212\377\377\376"+
                        b"\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017"+
                        b"\200\377\377\376"+
                        b"\201\377\377\376"+
                        b"\202\377\377\376"+
                        b"\203\377\377\376"+
                        b"\204\377\377\376"+
                        b"\205\377\377\376"+
                        b"\206\377\377\376"+
                        b"\207\377\010"+ b"tail" * 10  ),
                       (b"oo2"*765+
                        b"___|||ooo@@@__1||1oo1@@1__2||2oo2@@2__3||3oo3@@3"+
                        b"___"*765+
                        b"|||"*765+
                        b"ooo"*765+
                        b"@@@"*765+
                        b"__1"*765+
                        b"||1"*765+
                        b"oo1"*765+
                        b"@@1"*264) )
       ]

def _to_str(val):
    if isinstance(val, bytes):
        return "-"
    else:
        return val

@pytest.mark.parametrize("subenc,cw,ch,data,decoded", text, ids=_to_str)
@pytest.mark.asyncio
async def test_init(subenc, cw, ch, data, decoded):
    reader = _reader(data)
    decode = await _rle_rle( reader, cw, ch, 128+subenc, [])

    assert decode == decoded
    assert await reader.read(400) == b"tail" * 10